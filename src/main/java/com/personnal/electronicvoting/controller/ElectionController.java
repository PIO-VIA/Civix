// CORRECTION : ElectionController.java
// Modifier les m√©thodes pour √™tre coh√©rentes avec les autres contr√¥leurs

package com.personnal.electronicvoting.controller;

import com.personnal.electronicvoting.dto.ElectionDTO;
import com.personnal.electronicvoting.dto.VoteElectionDTO;
import com.personnal.electronicvoting.dto.request.CreateElectionRequest;
import com.personnal.electronicvoting.dto.request.UpdateElectionRequest;
import com.personnal.electronicvoting.dto.request.VoterElectionRequest;
import com.personnal.electronicvoting.service.ElectionService;
import com.personnal.electronicvoting.service.AuthService; // AJOUTER
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
// import org.springframework.security.access.prepost.PreAuthorize; // SUPPRIMER
// import org.springframework.security.core.Authentication; // SUPPRIMER
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import jakarta.servlet.http.HttpServletRequest;

import java.util.List;

@RestController
@RequestMapping("/api/elections")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Elections", description = "APIs de gestion des √©lections")
public class ElectionController {

    private final ElectionService electionService;
    private final AuthService authService; // AJOUTER

    // ==================== MIDDLEWARE S√âCURIT√â ====================

    /**
     * V√©rifier token admin dans les headers (COH√âRENT avec autres contr√¥leurs)
     */
    private void verifierTokenAdmin(String token) {
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        if (!authService.verifierTokenAdmin(cleanToken)) {
            throw new RuntimeException("Token administrateur invalide");
        }
    }

    /**
     * Extraire l'ID admin depuis le token
     */
    private String extraireAdminIdDepuisToken(String token) {
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        return authService.obtenirAdminDepuisToken(cleanToken).getExternalIdAdministrateur();
    }

    // ==================== GESTION √âLECTIONS ADMINISTRATEUR ====================

    @PostMapping
    // @PreAuthorize("hasRole('ADMIN')") // ‚ùå SUPPRIMER
    @Operation(summary = "Cr√©er une √©lection",
            description = "Cr√©er une nouvelle √©lection (acc√®s administrateur uniquement)")
    public ResponseEntity<ElectionDTO> creerElection(
            @RequestHeader("Authorization") String token, // ‚úÖ AJOUTER
            @Valid @RequestBody CreateElectionRequest request) { // ‚úÖ SUPPRIMER Authentication

        log.info("üó≥Ô∏è Cr√©ation d'une √©lection");

        try {
            // ‚úÖ V√©rifier token manuellement
            verifierTokenAdmin(token);
            String administrateurId = extraireAdminIdDepuisToken(token);

            log.info("üó≥Ô∏è Cr√©ation d'une √©lection par: {}", administrateurId);

            ElectionDTO election = electionService.creerElection(request, administrateurId);
            log.info("‚úÖ √âlection cr√©√©e: {}", election.getExternalIdElection());
            return ResponseEntity.ok(election);

        } catch (RuntimeException e) {
            log.error("‚ùå Erreur cr√©ation √©lection: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur interne cr√©ation √©lection: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    @PutMapping("/{electionId}")
    // @PreAuthorize("hasRole('ADMIN')") // ‚ùå SUPPRIMER
    @Operation(summary = "Modifier une √©lection",
            description = "Modifier une √©lection existante (acc√®s administrateur uniquement)")
    public ResponseEntity<ElectionDTO> modifierElection(
            @RequestHeader("Authorization") String token, // ‚úÖ AJOUTER
            @PathVariable String electionId,
            @Valid @RequestBody UpdateElectionRequest request) { // ‚úÖ SUPPRIMER Authentication

        log.info("üìù Modification de l'√©lection {}", electionId);

        try {
            // ‚úÖ V√©rifier token manuellement
            verifierTokenAdmin(token);
            String administrateurId = extraireAdminIdDepuisToken(token);

            log.info("üìù Modification de l'√©lection {} par: {}", electionId, administrateurId);

            ElectionDTO election = electionService.modifierElection(electionId, request, administrateurId);
            log.info("‚úÖ √âlection modifi√©e: {}", electionId);
            return ResponseEntity.ok(election);

        } catch (RuntimeException e) {
            log.error("‚ùå Erreur modification √©lection: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur interne modification √©lection: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    @DeleteMapping("/{electionId}")
    // @PreAuthorize("hasRole('ADMIN')") // ‚ùå SUPPRIMER
    @Operation(summary = "Supprimer une √©lection",
            description = "Supprimer une √©lection (acc√®s administrateur uniquement)")
    public ResponseEntity<Void> supprimerElection(
            @RequestHeader("Authorization") String token, // ‚úÖ AJOUTER
            @PathVariable String electionId) { // ‚úÖ SUPPRIMER Authentication

        log.info("üóëÔ∏è Suppression de l'√©lection {}", electionId);

        try {
            // ‚úÖ V√©rifier token manuellement
            verifierTokenAdmin(token);
            String administrateurId = extraireAdminIdDepuisToken(token);

            log.info("üóëÔ∏è Suppression de l'√©lection {} par: {}", electionId, administrateurId);

            electionService.supprimerElection(electionId, administrateurId);
            log.info("‚úÖ √âlection supprim√©e: {}", electionId);
            return ResponseEntity.noContent().build();

        } catch (RuntimeException e) {
            log.error("‚ùå Erreur suppression √©lection: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur interne suppression √©lection: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    @GetMapping("/mes-elections")
    // @PreAuthorize("hasRole('ADMIN')") // ‚ùå SUPPRIMER
    @Operation(summary = "Mes √©lections",
            description = "Lister les √©lections cr√©√©es par l'administrateur connect√©")
    public ResponseEntity<List<ElectionDTO>> listerMesElections(
            @RequestHeader("Authorization") String token) { // ‚úÖ AJOUTER et SUPPRIMER Authentication

        log.info("üìã Consultation des √©lections de l'administrateur");

        try {
            // ‚úÖ V√©rifier token manuellement
            verifierTokenAdmin(token);
            String administrateurId = extraireAdminIdDepuisToken(token);

            log.info("üìã Consultation des √©lections de l'administrateur: {}", administrateurId);

            List<ElectionDTO> elections = electionService.listerElectionsAdministrateur(administrateurId);
            log.info("üìä {} √©lections trouv√©es", elections.size());
            return ResponseEntity.ok(elections);

        } catch (Exception e) {
            log.error("üí• Erreur consultation √©lections administrateur: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== CONSULTATION PUBLIQUE (INCHANG√â) ====================

    @GetMapping
    @Operation(summary = "Lister toutes les √©lections",
            description = "Obtenir la liste de toutes les √©lections")
    public ResponseEntity<List<ElectionDTO>> listerToutesElections() {

        log.info("üìã Consultation publique - Liste de toutes les √©lections");

        try {
            List<ElectionDTO> elections = electionService.listerToutesElections();
            log.info("üìä {} √©lections retourn√©es", elections.size());
            return ResponseEntity.ok(elections);

        } catch (Exception e) {
            log.error("üí• Erreur consultation √©lections: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    @GetMapping("/{electionId}")
    @Operation(summary = "D√©tails d'une √©lection",
            description = "Obtenir les d√©tails d'une √©lection sp√©cifique")
    public ResponseEntity<ElectionDTO> obtenirElection(@PathVariable String electionId) {

        log.info("üîç Consultation de l'√©lection: {}", electionId);

        try {
            ElectionDTO election = electionService.obtenirElection(electionId);
            return ResponseEntity.ok(election);

        } catch (RuntimeException e) {
            log.warn("‚ùå √âlection non trouv√©e: {}", electionId);
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            log.error("üí• Erreur consultation √©lection: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== √âLECTIONS POUR √âLECTEURS ====================

    @GetMapping("/disponibles")
    // @PreAuthorize("hasRole('ELECTEUR')") // ‚ùå SUPPRIMER
    @Operation(summary = "√âlections disponibles",
            description = "Lister les √©lections disponibles pour l'√©lecteur connect√©")
    public ResponseEntity<List<ElectionDTO>> listerElectionsDisponibles(
            @RequestHeader("Authorization") String token) { // ‚úÖ AJOUTER et SUPPRIMER Authentication

        log.info("üó≥Ô∏è Consultation des √©lections disponibles");

        try {
            // ‚úÖ V√©rifier token √©lecteur
            String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
            if (!authService.verifierTokenElecteur(cleanToken)) {
                return ResponseEntity.status(401).build();
            }

            String electeurId = authService.obtenirElecteurDepuisToken(cleanToken).getExternalIdElecteur();
            log.info("üó≥Ô∏è Consultation des √©lections disponibles pour: {}", electeurId);

            List<ElectionDTO> elections = electionService.listerElectionsDisponiblesPourElecteur(electeurId);
            log.info("üìä {} √©lections disponibles", elections.size());
            return ResponseEntity.ok(elections);

        } catch (Exception e) {
            log.error("üí• Erreur consultation √©lections √©lecteur: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== VOTE (SIMPLIFI√â) ====================

    @PostMapping("/{electionId}/voter")
    // @PreAuthorize("hasRole('ELECTEUR')") // ‚ùå SUPPRIMER
    @Operation(summary = "Voter pour une √©lection",
            description = "Enregistrer un vote pour une √©lection")
    public ResponseEntity<VoteElectionDTO> voterPourElection(
            @RequestHeader("Authorization") String token, // ‚úÖ AJOUTER
            @PathVariable String electionId,
            @Valid @RequestBody VoterElectionRequest request,
            HttpServletRequest httpRequest) { // ‚úÖ SUPPRIMER Authentication

        log.info("üó≥Ô∏è Vote pour l'√©lection {}", electionId);

        try {
            // ‚úÖ V√©rifier token √©lecteur
            String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
            if (!authService.verifierTokenElecteur(cleanToken)) {
                return ResponseEntity.status(401).build();
            }

            String electeurId = authService.obtenirElecteurDepuisToken(cleanToken).getExternalIdElecteur();
            log.info("üó≥Ô∏è Vote pour l'√©lection {} par: {}", electionId, electeurId);

            request.setElectionId(electionId);
            request.setAdresseIp(getClientIpAddress(httpRequest));
            request.setUserAgent(httpRequest.getHeader("User-Agent"));

            VoteElectionDTO vote = electionService.voterPourElection(request, electeurId);
            log.info("‚úÖ Vote enregistr√©: {}", vote.getId());
            return ResponseEntity.ok(vote);

        } catch (RuntimeException e) {
            log.error("‚ùå Erreur vote: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur interne vote: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== R√âSULTATS (INCHANG√â) ====================

    @GetMapping("/{electionId}/resultats")
    @Operation(summary = "R√©sultats d'une √©lection",
            description = "Obtenir les r√©sultats d'une √©lection")
    public ResponseEntity<ElectionService.ResultatsElectionDTO> obtenirResultatsElection(
            @PathVariable String electionId) {

        log.info("üìä Consultation des r√©sultats de l'√©lection: {}", electionId);

        try {
            ElectionService.ResultatsElectionDTO resultats = electionService.obtenirResultatsElection(electionId);
            return ResponseEntity.ok(resultats);

        } catch (RuntimeException e) {
            log.warn("‚ùå R√©sultats non disponibles pour l'√©lection: {} - {}", electionId, e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur consultation r√©sultats: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== UTILITAIRES ====================

    private String getClientIpAddress(HttpServletRequest request) {
        String xForwardedForHeader = request.getHeader("X-Forwarded-For");
        if (xForwardedForHeader == null) {
            return request.getRemoteAddr();
        } else {
            return xForwardedForHeader.split(",")[0];
        }
    }

    // ==================== HEALTH CHECK ====================

    @GetMapping("/health")
    @Operation(summary = "Health check",
            description = "V√©rifier la sant√© du service √©lections")
    public ResponseEntity<HealthCheckDTO> healthCheck() {

        log.info("üè• Health check service √©lections");

        try {
            List<ElectionDTO> elections = electionService.listerToutesElections();

            HealthCheckDTO health = HealthCheckDTO.builder()
                    .status("UP")
                    .nombreElections((long) elections.size())
                    .electionsActives(elections.stream()
                            .filter(ElectionDTO::getEstActive)
                            .count())
                    .timestamp(java.time.LocalDateTime.now())
                    .message("Service √©lections op√©rationnel")
                    .build();

            return ResponseEntity.ok(health);

        } catch (Exception e) {
            log.error("üí• Health check √©chou√©: {}", e.getMessage());

            HealthCheckDTO health = HealthCheckDTO.builder()
                    .status("DOWN")
                    .nombreElections(0L)
                    .electionsActives(0L)
                    .timestamp(java.time.LocalDateTime.now())
                    .message("Erreur service √©lections: " + e.getMessage())
                    .build();

            return ResponseEntity.status(503).body(health);
        }
    }

    // ==================== DTO HEALTH CHECK ====================

    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class HealthCheckDTO {
        private String status;
        private Long nombreElections;
        private Long electionsActives;
        private java.time.LocalDateTime timestamp;
        private String message;
    }
}