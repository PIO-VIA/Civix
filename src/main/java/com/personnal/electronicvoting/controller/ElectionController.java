package com.personnal.electronicvoting.controller;

import com.personnal.electronicvoting.dto.ElectionDTO;
import com.personnal.electronicvoting.dto.VoteElectionDTO;
import com.personnal.electronicvoting.dto.request.CreateElectionRequest;
import com.personnal.electronicvoting.dto.request.UpdateElectionRequest;
import com.personnal.electronicvoting.dto.request.VoterElectionRequest;
import com.personnal.electronicvoting.service.ElectionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import jakarta.servlet.http.HttpServletRequest;

import java.util.List;

@RestController
@RequestMapping("/api/elections")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Elections", description = "APIs de gestion des √©lections")
public class ElectionController {

    private final ElectionService electionService;

    // ==================== GESTION √âLECTIONS ADMINISTRATEUR ====================

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "Cr√©er une √©lection",
            description = "Cr√©er une nouvelle √©lection (acc√®s administrateur uniquement)")
    public ResponseEntity<ElectionDTO> creerElection(
            @Valid @RequestBody CreateElectionRequest request,
            Authentication authentication) {

        log.info("üó≥Ô∏è Cr√©ation d'une √©lection par: {}", authentication.getName());

        try {
            ElectionDTO election = electionService.creerElection(request, authentication.getName());
            log.info("‚úÖ √âlection cr√©√©e: {}", election.getExternalIdElection());
            return ResponseEntity.ok(election);

        } catch (RuntimeException e) {
            log.error("‚ùå Erreur cr√©ation √©lection: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur interne cr√©ation √©lection: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    @PutMapping("/{electionId}")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "Modifier une √©lection",
            description = "Modifier une √©lection existante (acc√®s administrateur uniquement)")
    public ResponseEntity<ElectionDTO> modifierElection(
            @PathVariable String electionId,
            @Valid @RequestBody UpdateElectionRequest request,
            Authentication authentication) {

        log.info("üìù Modification de l'√©lection {} par: {}", electionId, authentication.getName());

        try {
            ElectionDTO election = electionService.modifierElection(electionId, request, authentication.getName());
            log.info("‚úÖ √âlection modifi√©e: {}", electionId);
            return ResponseEntity.ok(election);

        } catch (RuntimeException e) {
            log.error("‚ùå Erreur modification √©lection: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur interne modification √©lection: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    @DeleteMapping("/{electionId}")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "Supprimer une √©lection",
            description = "Supprimer une √©lection (acc√®s administrateur uniquement)")
    public ResponseEntity<Void> supprimerElection(
            @PathVariable String electionId,
            Authentication authentication) {

        log.info("üóëÔ∏è Suppression de l'√©lection {} par: {}", electionId, authentication.getName());

        try {
            electionService.supprimerElection(electionId, authentication.getName());
            log.info("‚úÖ √âlection supprim√©e: {}", electionId);
            return ResponseEntity.noContent().build();

        } catch (RuntimeException e) {
            log.error("‚ùå Erreur suppression √©lection: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur interne suppression √©lection: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    @GetMapping("/mes-elections")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "Mes √©lections",
            description = "Lister les √©lections cr√©√©es par l'administrateur connect√©")
    public ResponseEntity<List<ElectionDTO>> listerMesElections(Authentication authentication) {

        log.info("üìã Consultation des √©lections de l'administrateur: {}", authentication.getName());

        try {
            List<ElectionDTO> elections = electionService.listerElectionsAdministrateur(authentication.getName());
            log.info("üìä {} √©lections trouv√©es", elections.size());
            return ResponseEntity.ok(elections);

        } catch (Exception e) {
            log.error("üí• Erreur consultation √©lections administrateur: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== CONSULTATION PUBLIQUE ====================

    @GetMapping
    @Operation(summary = "Lister toutes les √©lections",
            description = "Obtenir la liste de toutes les √©lections")
    public ResponseEntity<List<ElectionDTO>> listerToutesElections() {

        log.info("üìã Consultation publique - Liste de toutes les √©lections");

        try {
            List<ElectionDTO> elections = electionService.listerToutesElections();
            log.info("üìä {} √©lections retourn√©es", elections.size());
            return ResponseEntity.ok(elections);

        } catch (Exception e) {
            log.error("üí• Erreur consultation √©lections: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    @GetMapping("/{electionId}")
    @Operation(summary = "D√©tails d'une √©lection",
            description = "Obtenir les d√©tails d'une √©lection sp√©cifique")
    public ResponseEntity<ElectionDTO> obtenirElection(@PathVariable String electionId) {

        log.info("üîç Consultation de l'√©lection: {}", electionId);

        try {
            ElectionDTO election = electionService.obtenirElection(electionId);
            return ResponseEntity.ok(election);

        } catch (RuntimeException e) {
            log.warn("‚ùå √âlection non trouv√©e: {}", electionId);
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            log.error("üí• Erreur consultation √©lection: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== √âLECTIONS POUR √âLECTEURS ====================

    @GetMapping("/disponibles")
    @PreAuthorize("hasRole('ELECTEUR')")
    @Operation(summary = "√âlections disponibles",
            description = "Lister les √©lections disponibles pour l'√©lecteur connect√©")
    public ResponseEntity<List<ElectionDTO>> listerElectionsDisponibles(Authentication authentication) {

        log.info("üó≥Ô∏è Consultation des √©lections disponibles pour: {}", authentication.getName());

        try {
            List<ElectionDTO> elections = electionService.listerElectionsDisponiblesPourElecteur(authentication.getName());
            log.info("üìä {} √©lections disponibles", elections.size());
            return ResponseEntity.ok(elections);

        } catch (Exception e) {
            log.error("üí• Erreur consultation √©lections √©lecteur: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== VOTE ====================

    @PostMapping("/{electionId}/voter")
    @PreAuthorize("hasRole('ELECTEUR')")
    @Operation(summary = "Voter pour une √©lection",
            description = "Enregistrer un vote pour une √©lection")
    public ResponseEntity<VoteElectionDTO> voterPourElection(
            @PathVariable String electionId,
            @Valid @RequestBody VoterElectionRequest request,
            Authentication authentication,
            HttpServletRequest httpRequest) {

        log.info("üó≥Ô∏è Vote pour l'√©lection {} par: {}", electionId, authentication.getName());

        try {
            request.setElectionId(electionId);
            request.setAdresseIp(getClientIpAddress(httpRequest));
            request.setUserAgent(httpRequest.getHeader("User-Agent"));

            VoteElectionDTO vote = electionService.voterPourElection(request, authentication.getName());
            log.info("‚úÖ Vote enregistr√©: {}", vote.getId());
            return ResponseEntity.ok(vote);

        } catch (RuntimeException e) {
            log.error("‚ùå Erreur vote: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur interne vote: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== R√âSULTATS ====================

    @GetMapping("/{electionId}/resultats")
    @Operation(summary = "R√©sultats d'une √©lection",
            description = "Obtenir les r√©sultats d'une √©lection")
    public ResponseEntity<ElectionService.ResultatsElectionDTO> obtenirResultatsElection(
            @PathVariable String electionId) {

        log.info("üìä Consultation des r√©sultats de l'√©lection: {}", electionId);

        try {
            ElectionService.ResultatsElectionDTO resultats = electionService.obtenirResultatsElection(electionId);
            return ResponseEntity.ok(resultats);

        } catch (RuntimeException e) {
            log.warn("‚ùå R√©sultats non disponibles pour l'√©lection: {} - {}", electionId, e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur consultation r√©sultats: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // ==================== UTILITAIRES ====================

    private String getClientIpAddress(HttpServletRequest request) {
        String xForwardedForHeader = request.getHeader("X-Forwarded-For");
        if (xForwardedForHeader == null) {
            return request.getRemoteAddr();
        } else {
            return xForwardedForHeader.split(",")[0];
        }
    }

    // ==================== HEALTH CHECK ====================

    @GetMapping("/health")
    @Operation(summary = "Health check",
            description = "V√©rifier la sant√© du service √©lections")
    public ResponseEntity<HealthCheckDTO> healthCheck() {

        log.info("üè• Health check service √©lections");

        try {
            List<ElectionDTO> elections = electionService.listerToutesElections();

            HealthCheckDTO health = HealthCheckDTO.builder()
                    .status("UP")
                    .nombreElections((long) elections.size())
                    .electionsActives(elections.stream()
                            .filter(ElectionDTO::getEstActive)
                            .count())
                    .timestamp(java.time.LocalDateTime.now())
                    .message("Service √©lections op√©rationnel")
                    .build();

            return ResponseEntity.ok(health);

        } catch (Exception e) {
            log.error("üí• Health check √©chou√©: {}", e.getMessage());

            HealthCheckDTO health = HealthCheckDTO.builder()
                    .status("DOWN")
                    .nombreElections(0L)
                    .electionsActives(0L)
                    .timestamp(java.time.LocalDateTime.now())
                    .message("Erreur service √©lections: " + e.getMessage())
                    .build();

            return ResponseEntity.status(503).body(health);
        }
    }

    // ==================== DTO HEALTH CHECK ====================

    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class HealthCheckDTO {
        private String status;
        private Long nombreElections;
        private Long electionsActives;
        private java.time.LocalDateTime timestamp;
        private String message;
    }
}