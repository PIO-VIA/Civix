package com.personnal.electronicvoting.controller;

import com.personnal.electronicvoting.dto.VoteDTO;
import com.personnal.electronicvoting.service.VoteService;
import com.personnal.electronicvoting.service.AuthService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/votes")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Vote", description = "APIs de gestion des votes")
public class VoteController {

    private final VoteService voteService;
    private final AuthService authService;

    // ==================== MIDDLEWARE S√âCURIT√â ====================

    /**
     * üîí V√©rifier token √©lecteur et retourner l'√©lecteur
     */
    private com.personnal.electronicvoting.model.Electeur verifierEtObtenirElecteur(String token) {
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        if (!authService.verifierTokenElecteur(cleanToken)) {
            throw new RuntimeException("Token √©lecteur invalide");
        }
        return authService.obtenirElecteurDepuisToken(cleanToken);
    }

    // ==================== PROCESSUS DE VOTE ====================

    /**
     * üó≥Ô∏è Effectuer un vote (endpoint principal)
     */
    @PostMapping("/effectuer")
    @Operation(summary = "Effectuer un vote",
            description = "Enregistrer le vote d'un √©lecteur pour un candidat (un seul vote par √©lecteur)")
    public ResponseEntity<VoteResponse> effectuerVote(
            @RequestHeader("Authorization") String token,
            @RequestParam String candidatId) {

        log.info("üó≥Ô∏è Demande de vote - Candidat: {}", candidatId);

        try {
            var electeur = verifierEtObtenirElecteur(token);
            String electeurId = electeur.getExternalIdElecteur();

            // Effectuer le vote
            VoteDTO vote = voteService.effectuerVote(electeurId, candidatId);

            VoteResponse response = VoteResponse.builder()
                    .success(true)
                    .message("Vote enregistr√© avec succ√®s !")
                    .electeurId(electeurId)
                    .candidatId(candidatId)
                    .dateVote(vote.getDateVote())
                    .build();

            log.info("‚úÖ Vote enregistr√© avec succ√®s - √âlecteur: {}, Candidat: {}",
                    electeurId, candidatId);

            return ResponseEntity.ok(response);

        } catch (RuntimeException e) {
            log.warn("‚ùå Erreur lors du vote: {}", e.getMessage());

            VoteResponse response = VoteResponse.builder()
                    .success(false)
                    .message(e.getMessage())
                    .build();

            return ResponseEntity.badRequest().body(response);

        } catch (Exception e) {
            log.error("üí• Erreur syst√®me lors du vote: {}", e.getMessage(), e);

            VoteResponse response = VoteResponse.builder()
                    .success(false)
                    .message("Erreur syst√®me. Veuillez r√©essayer.")
                    .build();

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    // ==================== CONSULTATION R√âSULTATS ====================

    /**
     * üìä Consulter les r√©sultats de l'√©lection
     */
    @GetMapping("/resultats")
    @Operation(summary = "R√©sultats de l'√©lection",
            description = "Obtenir les r√©sultats complets de l'√©lection (acc√®s public)")
    public ResponseEntity<List<VoteService.ResultatVoteDTO>> consulterResultats() {

        log.info("üìä Consultation des r√©sultats de l'√©lection");

        try {
            List<VoteService.ResultatVoteDTO> resultats = voteService.obtenirResultatsVotes();
            return ResponseEntity.ok(resultats);

        } catch (Exception e) {
            log.error("üí• Erreur consultation r√©sultats: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * üèÜ Obtenir le candidat gagnant
     */
    @GetMapping("/gagnant")
    @Operation(summary = "Candidat gagnant",
            description = "Obtenir le candidat actuellement en t√™te")
    public ResponseEntity<VoteService.ResultatVoteDTO> obtenirGagnant() {

        log.info("üèÜ Consultation du candidat gagnant");

        try {
            VoteService.ResultatVoteDTO gagnant = voteService.obtenirGagnant();
            return ResponseEntity.ok(gagnant);

        } catch (RuntimeException e) {
            log.warn("‚ùå Aucun gagnant disponible: {}", e.getMessage());
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            log.error("üí• Erreur consultation gagnant: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ==================== STATUT DE VOTE ====================

    /**
     * ‚úÖ V√©rifier le statut de vote d'un √©lecteur
     */
    @GetMapping("/statut")
    @Operation(summary = "Statut de vote √©lecteur",
            description = "V√©rifier si l'√©lecteur connect√© a d√©j√† vot√©")
    public ResponseEntity<VoteService.StatutVoteElecteurDTO> obtenirStatutVote(
            @RequestHeader("Authorization") String token) {

        log.info("‚úÖ Consultation statut de vote");

        try {
            var electeur = verifierEtObtenirElecteur(token);
            String electeurId = electeur.getExternalIdElecteur();

            VoteService.StatutVoteElecteurDTO statut = voteService.obtenirStatutVoteElecteur(electeurId);
            return ResponseEntity.ok(statut);

        } catch (RuntimeException e) {
            log.warn("‚ùå Erreur statut vote: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        } catch (Exception e) {
            log.error("üí• Erreur syst√®me statut vote: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * ‚úÖ V√©rifier si un √©lecteur peut voter
     */
    @GetMapping("/peut-voter")
    @Operation(summary = "V√©rifier droit de vote",
            description = "V√©rifier si l'√©lecteur connect√© peut encore voter")
    public ResponseEntity<PeutVoterResponse> verifierPeutVoter(
            @RequestHeader("Authorization") String token) {

        log.info("‚úÖ V√©rification droit de vote");

        try {
            var electeur = verifierEtObtenirElecteur(token);
            String electeurId = electeur.getExternalIdElecteur();

            boolean peutVoter = voteService.electeurPeutVoter(electeurId);

            PeutVoterResponse response = PeutVoterResponse.builder()
                    .peutVoter(peutVoter)
                    .message(peutVoter ?
                            "Vous pouvez voter" :
                            "Vous avez d√©j√† vot√©")
                    .electeurId(electeurId)
                    .build();

            return ResponseEntity.ok(response);

        } catch (RuntimeException e) {
            log.warn("‚ùå Erreur v√©rification vote: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        } catch (Exception e) {
            log.error("üí• Erreur syst√®me v√©rification vote: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ==================== STATISTIQUES ====================

    /**
     * üìä Obtenir les statistiques globales de vote
     */
    @GetMapping("/statistiques")
    @Operation(summary = "Statistiques de vote",
            description = "Obtenir les statistiques globales de l'√©lection")
    public ResponseEntity<VoteService.StatistiquesVoteDTO> obtenirStatistiques() {

        log.info("üìä Consultation statistiques de vote");

        try {
            VoteService.StatistiquesVoteDTO stats = voteService.obtenirStatistiquesGenerales();
            return ResponseEntity.ok(stats);

        } catch (Exception e) {
            log.error("üí• Erreur statistiques vote: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * üìà Obtenir la r√©partition temporelle des votes
     */
    @GetMapping("/repartition-temporelle")
    @Operation(summary = "R√©partition temporelle",
            description = "Obtenir l'√©volution temporelle des votes")
    public ResponseEntity<List<VoteService.VoteTemporelDTO>> obtenirRepartitionTemporelle() {

        log.info("üìà Consultation r√©partition temporelle des votes");

        try {
            List<VoteService.VoteTemporelDTO> repartition = voteService.obtenirRepartitionTemporelle();
            return ResponseEntity.ok(repartition);

        } catch (Exception e) {
            log.error("üí• Erreur r√©partition temporelle: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ==================== ENDPOINTS DE VALIDATION ====================

    /**
     * üîç Pr√©visualiser son vote avant validation
     */
    @PostMapping("/previsualiser")
    @Operation(summary = "Pr√©visualiser vote",
            description = "Pr√©visualiser le vote avant confirmation (sans l'enregistrer)")
    public ResponseEntity<PreviewVoteResponse> previsualiserVote(
            @RequestHeader("Authorization") String token,
            @RequestParam String candidatId) {

        log.info("üîç Pr√©visualisation vote - Candidat: {}", candidatId);

        try {
            var electeur = verifierEtObtenirElecteur(token);
            String electeurId = electeur.getExternalIdElecteur();

            // V√©rifications sans enregistrer
            if (!voteService.electeurPeutVoter(electeurId)) {
                throw new RuntimeException("Vous avez d√©j√† vot√©");
            }

            // R√©cup√©rer infos candidat
            // (Vous pouvez ajouter une m√©thode dans CandidatService si n√©cessaire)

            PreviewVoteResponse preview = PreviewVoteResponse.builder()
                    .electeurId(electeurId)
                    .electeurUsername(electeur.getUsername())
                    .candidatId(candidatId)
                    .messageConfirmation("Confirmez-vous votre vote pour ce candidat ?")
                    .avertissement("‚ö†Ô∏è Attention : Vous ne pourrez plus modifier votre vote apr√®s confirmation.")
                    .build();

            return ResponseEntity.ok(preview);

        } catch (RuntimeException e) {
            log.warn("‚ùå Erreur pr√©visualisation: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            log.error("üí• Erreur syst√®me pr√©visualisation: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ==================== DTOs DE R√âPONSE ====================

    /**
     * üó≥Ô∏è DTO pour r√©ponse de vote
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class VoteResponse {
        private boolean success;
        private String message;
        private String electeurId;
        private String candidatId;
        private java.time.LocalDate dateVote;
    }

    /**
     * ‚úÖ DTO pour v√©rification droit de vote
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class PeutVoterResponse {
        private boolean peutVoter;
        private String message;
        private String electeurId;
    }

    /**
     * üîç DTO pour pr√©visualisation de vote
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class PreviewVoteResponse {
        private String electeurId;
        private String electeurUsername;
        private String candidatId;
        private String messageConfirmation;
        private String avertissement;
    }
}