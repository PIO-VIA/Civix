package com.personnal.electronicvoting.service;

import com.personnal.electronicvoting.dto.request.LoginRequest;
import com.personnal.electronicvoting.dto.response.AuthResponse;
import com.personnal.electronicvoting.model.*;
import com.personnal.electronicvoting.repository.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional(readOnly = true)
public class AuthService {

    private final ElecteurRepository electeurRepository;
    private final AdministrateurRepository administrateurRepository;
    private final PasswordEncoder passwordEncoder;

    // ==================== AUTHENTIFICATION √âLECTEUR ====================

    /**
     *  Authentification √©lecteur avec identifiants re√ßus par email
     */
    public AuthResponse authentifierElecteur(LoginRequest request) {
        log.info(" Tentative connexion √©lecteur - Email: {}", request.getEmail());

        try {
            //  Recherche √©lecteur par email
            Electeur electeur = electeurRepository.findByEmail(request.getEmail())
                    .orElseThrow(() -> {
                        log.warn(" Tentative connexion email √©lecteur inexistant: {}", request.getEmail());
                        return new RuntimeException("Identifiants invalides");
                    });

            //  V√©rification mot de passe
            if (!passwordEncoder.matches(request.getMotDePasse(), electeur.getMotDePasse())) {
                log.warn(" Tentative connexion mot de passe √©lecteur incorrect: {}", request.getEmail());
                return null;
            }

            log.info(" Connexion √©lecteur r√©ussie - ID: {}, Username: {}",
                    electeur.getExternalIdElecteur(), electeur.getUsername());

            //  G√©n√©ration "token" (simplifi√© pour l'instant)
            String token = genererTokenElecteur(electeur);

            return AuthResponse.builder()
                    .userId(electeur.getExternalIdElecteur())
                    .username(electeur.getUsername())
                    .email(electeur.getEmail())
                    .role("ELECTEUR")
                    .token(token)
                    .aVote(electeur.isAVote())
                    .premierConnexion(isMotDePasseTemporaire(electeur))
                    .build();

        } catch (RuntimeException e) {
            throw e; // Re-lancer les erreurs m√©tier
        } catch (Exception e) {
            log.error(" Erreur authentification √©lecteur: {}", e.getMessage(), e);
            throw new RuntimeException("Erreur lors de l'authentification", e);
        }
    }

    // ==================== AUTHENTIFICATION ADMINISTRATEUR ====================

    /**
     *  Authentification administrateur
     */
    public AuthResponse authentifierAdministrateur(LoginRequest request) {
        log.info(" Tentative connexion admin - Email: {}", request.getEmail());

        try {
            // üîç Recherche admin par email
            Administrateur admin = administrateurRepository.findByEmail(request.getEmail())
                    .orElseThrow(() -> {
                        log.warn(" Tentative connexion email admin inexistant: {}", request.getEmail());
                        return new RuntimeException("Identifiants invalides");
                    });

            //  V√©rification mot de passe
            if (!passwordEncoder.matches(request.getMotDePasse(), admin.getMotDePasse())) {
                log.warn(" Tentative connexion mot de passe admin incorrect: {}", request.getEmail());
                throw new RuntimeException("Identifiants invalides");
            }

            log.info(" Connexion admin r√©ussie - ID: {}, Username: {}",
                    admin.getExternalIdAdministrateur(), admin.getUsername());

            //  G√©n√©ration "token" admin
            String token = genererTokenAdmin(admin);

            return AuthResponse.builder()
                    .userId(admin.getExternalIdAdministrateur())
                    .username(admin.getUsername())
                    .email(admin.getEmail())
                    .role("ADMIN")
                    .token(token)
                    .aVote(null) // N/A pour admin
                    .premierConnexion(false) // Admins g√®rent leurs mots de passe
                    .build();

        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            log.error(" Erreur authentification admin: {}", e.getMessage(), e);
            throw new RuntimeException("Erreur lors de l'authentification", e);
        }
    }

    // ==================== GESTION SESSIONS / TOKENS ====================

    /**
     * V√©rifier si un token √©lecteur est valide
     */
    /**
     * V√©rifier si un token admin est valide (CORRIG√â)
     */
    public boolean verifierTokenAdmin(String token) {
        try {
            if (token.startsWith("ADMIN-") && token.length() > 6) {
                // Extraire seulement l'UUID admin (pas le timestamp)
                String tokenBody = token.substring(6); // Enlever "ADMIN-"
                String[] parts = tokenBody.split("-");

                // Reconstituer l'UUID (5 parties s√©par√©es par des tirets)
                if (parts.length >= 5) {
                    String adminId = String.join("-", parts[0], parts[1], parts[2], parts[3], parts[4]);

                    boolean exists = administrateurRepository.findByExternalIdAdministrateur(adminId).isPresent();
                    log.debug("V√©rification token admin - UUID: {}, Existe: {}", adminId, exists);
                    return exists;
                }
            }
            return false;
        } catch (Exception e) {
            log.debug("Token admin invalide: {}", token);
            return false;
        }
    }

    /**
     * ‚úÖ V√©rifier si un token √©lecteur est valide (CORRIG√â)
     */
    public boolean verifierTokenElecteur(String token) {
        try {
            if (token.startsWith("ELECTEUR-") && token.length() > 9) {
                // Extraire seulement l'UUID √©lecteur (pas le timestamp)
                String tokenBody = token.substring(9); // Enlever "ELECTEUR-"
                String[] parts = tokenBody.split("-");

                // Reconstituer l'UUID (5 parties s√©par√©es par des tirets)
                if (parts.length >= 5) {
                    String electeurId = String.join("-", parts[0], parts[1], parts[2], parts[3], parts[4]);

                    boolean exists = electeurRepository.findByExternalIdElecteur(electeurId).isPresent();
                    log.debug("V√©rification token √©lecteur - UUID: {}, Existe: {}", electeurId, exists);
                    return exists;
                }
            }
            return false;
        } catch (Exception e) {
            log.debug("Token √©lecteur invalide: {}", token);
            return false;
        }
    }

    /**
     *  Obtenir admin depuis token (CORRIG√â)
     */
    public Administrateur obtenirAdminDepuisToken(String token) {
        if (!verifierTokenAdmin(token)) {
            throw new RuntimeException("Token admin invalide");
        }

        // Extraire l'UUID admin
        String tokenBody = token.substring(6); // Enlever "ADMIN-"
        String[] parts = tokenBody.split("-");
        String adminId = String.join("-", parts[0], parts[1], parts[2], parts[3], parts[4]);

        return administrateurRepository.findByExternalIdAdministrateur(adminId)
                .orElseThrow(() -> new RuntimeException("Administrateur non trouv√©"));
    }

    /**
     * Obtenir √©lecteur depuis token (CORRIG√â)
     */
    public Electeur obtenirElecteurDepuisToken(String token) {
        if (!verifierTokenElecteur(token)) {
            throw new RuntimeException("Token √©lecteur invalide");
        }

        // Extraire l'UUID √©lecteur
        String tokenBody = token.substring(9); // Enlever "ELECTEUR-"
        String[] parts = tokenBody.split("-");
        String electeurId = String.join("-", parts[0], parts[1], parts[2], parts[3], parts[4]);

        return electeurRepository.findByExternalIdElecteur(electeurId)
                .orElseThrow(() -> new RuntimeException("√âlecteur non trouv√©"));
    }
    // ==================== CHANGEMENT MOT DE PASSE ====================

    /**
     *  Changer mot de passe √©lecteur (premi√®re connexion)
     */
    @Transactional
    public AuthResponse changerMotDePasseElecteur(String token, String ancienMotDePasse, String nouveauMotDePasse) {
        log.info(" Changement mot de passe √©lecteur");

        try {
            Electeur electeur = obtenirElecteurDepuisToken(token);

            // V√©rifier ancien mot de passe
            if (!passwordEncoder.matches(ancienMotDePasse, electeur.getMotDePasse())) {
                throw new RuntimeException("Ancien mot de passe incorrect");
            }

            // Validation nouveau mot de passe
            validerNouveauMotDePasse(nouveauMotDePasse);

            // Changer le mot de passe
            electeur.setMotDePasse(passwordEncoder.encode(nouveauMotDePasse));
            electeurRepository.save(electeur);

            log.info(" Mot de passe √©lecteur chang√© - ID: {}", electeur.getExternalIdElecteur());

            // Retourner nouvelle auth response
            return AuthResponse.builder()
                    .userId(electeur.getExternalIdElecteur())
                    .username(electeur.getUsername())
                    .email(electeur.getEmail())
                    .role("ELECTEUR")
                    .token(genererTokenElecteur(electeur))
                    .aVote(electeur.isAVote())
                    .premierConnexion(false) // Plus premi√®re connexion
                    .build();

        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            log.error(" Erreur changement mot de passe √©lecteur: {}", e.getMessage(), e);
            throw new RuntimeException("Erreur lors du changement de mot de passe", e);
        }
    }

    // ==================== UTILITAIRES ====================

    /**
     *  G√©n√©ration token √©lecteur (simplifi√©)
     *  Future : JWT avec expiration, claims, etc.
     */
    private String genererTokenElecteur(Electeur electeur) {
        // Token simplifi√© pour l'apprentissage
        return "ELECTEUR-" + electeur.getExternalIdElecteur() + "-" + System.currentTimeMillis();
    }

    /**
     *  G√©n√©ration token admin
     */
    private String genererTokenAdmin(Administrateur admin) {
        return "ADMIN-" + admin.getExternalIdAdministrateur() + "-" + System.currentTimeMillis();
    }

    /**
     * D√©terminer si c'est une premi√®re connexion (mot de passe temporaire)
     */
    private boolean isMotDePasseTemporaire(Electeur electeur) {
        // Logique simple : si le mot de passe contient certains patterns
        //  Future : flag en base ou v√©rification plus sophistiqu√©e
        return true; // Pour l'instant, on assume que c'est toujours temporaire
    }

    /**
     *  Validation nouveau mot de passe
     */
    private void validerNouveauMotDePasse(String motDePasse) {
        if (motDePasse == null || motDePasse.length() < 8) {
            throw new RuntimeException("Le mot de passe doit contenir au moins 8 caract√®res");
        }

        // V√©rification complexit√©
        if (!motDePasse.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&._-])[A-Za-z\\d@$!%*?&._-]{8,}$")) {
            throw new RuntimeException("Le mot de passe doit contenir une majuscule, une minuscule, un chiffre et un caract√®re sp√©cial");
        }
    }
}