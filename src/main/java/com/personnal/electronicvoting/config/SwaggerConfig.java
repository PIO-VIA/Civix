package com.personnal.electronicvoting.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.Components;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("üó≥Ô∏è Plateforme de Vote √âlectronique - API")
                        .description("""
                                ## üìã Documentation API Compl√®te
                                
                                Cette API permet de g√©rer une plateforme de vote √©lectronique s√©curis√©e avec les fonctionnalit√©s suivantes :
                                
                                ### üéØ Fonctionnalit√©s Principales
                                - **Vote s√©curis√©** : Un vote unique par √©lecteur avec v√©rifications
                                - **Gestion des candidats** : CRUD complet des candidats et leurs campagnes
                                - **Administration** : Interface compl√®te pour les administrateurs
                                - **R√©sultats temps r√©el** : Consultation des r√©sultats en direct
                                - **Rapports avanc√©s** : G√©n√©ration de rapports d√©taill√©s
                                - **Monitoring** : Surveillance syst√®me compl√®te
                                
                                ### üîê Authentification
                                L'API utilise un syst√®me de tokens Bearer pour l'authentification :
                                - **√âlecteurs** : Token √©lecteur pour voter et consulter
                                - **Administrateurs** : Token admin pour la gestion compl√®te
                                - **Public** : Acc√®s libre pour consultation g√©n√©rale
                                
                                ### üìä Types d'Utilisateurs
                                1. **üë• √âlecteurs** : Votent et consultent les r√©sultats
                                2. **üë®‚Äçüíº Administrateurs** : G√®rent la plateforme
                                3. **üåç Public** : Consulte candidats, campagnes et r√©sultats
                                
                                ### üöÄ D√©marrage Rapide
                                1. **Authentification** : `POST /api/auth/electeur/login` ou `/admin/login`
                                2. **Explorer** : `GET /api/public/accueil` pour commencer
                                3. **Voter** : `POST /api/votes/effectuer` (√©lecteurs authentifi√©s)
                                4. **Administrer** : `GET /api/admin/dashboard` (admins)
                                
                                ###  R√©ponses API
                                Toutes les r√©ponses suivent un format JSON standard avec gestion d'erreurs appropri√©e.
                                """)
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("√âquipe Technique")
                                .email("piodjiele@gmail.com")
                                .url("https://github.com/PIO-VIA/Civix.git"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                .servers(List.of(
                        new Server()
                                .url("http://localhost:8082")
                                .description(" Serveur de D√©veloppement"),
                        new Server()
                                .url("https://civix-tqg1.onrender.com")
                                .description(" Serveur de Production")))
                .addSecurityItem(new SecurityRequirement()
                        .addList("bearerAuth"))
                .components(new Components()
                        .addSecuritySchemes("bearerAuth", new SecurityScheme()
                                .type(SecurityScheme.Type.HTTP)
                                .scheme("bearer")
                                .bearerFormat("JWT")
                                .description("Token d'authentification Bearer (√©lecteur ou admin)")))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("Authentification")
                        .description("üîê Connexion, d√©connexion et gestion des sessions"))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("Administration")
                        .description("üë®‚Äçüíº Gestion administrative (√©lecteurs, candidats, campagnes)"))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("Vote")
                        .description("üó≥Ô∏è Processus de vote et consultation des r√©sultats"))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("√âlecteur")
                        .description("üë• Interface d√©di√©e aux √©lecteurs"))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("Candidats (Public)")
                        .description("üèÜ Consultation publique des candidats"))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("Campagnes (Public)")
                        .description("üì¢ Consultation publique des campagnes"))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("Public")
                        .description("üåç APIs publiques g√©n√©rales"))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("Tableaux de bord")
                        .description("üìä Dashboards personnalis√©s par r√¥le"))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("Rapports")
                        .description("üìë G√©n√©ration et export de rapports"))
                .addTagsItem(new io.swagger.v3.oas.models.tags.Tag()
                        .name("Syst√®me")
                        .description("üîß Monitoring, maintenance et administration syst√®me"));
    }
}
